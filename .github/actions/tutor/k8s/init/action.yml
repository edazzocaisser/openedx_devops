#------------------------------------------------------------------------------
# written by: mcdaniel
# date: june-2022
#
# usage: re-usable workflow to initialize Github environment:
#   - configure AWS credentials
#   - install Python
#   - install tutor
#   - install kubectl
#   -
#------------------------------------------------------------------------------
name: Initial and configure tutor
description: Install aws cli, kubectl, and tutor. Configure tutor
branding:
  icon: 'cloud'
  color: 'orange'
inputs:
  environment-id:
    description: 'The Open edX platform environment. Examples: prod, qa, dev'
    required: true
    type: string
  namespace:
    description: 'The Kubernetes namesapce to which the Open edX platform environment will be deployed. Example: openedx-prod'
    required: true
    type: string
  openedx-common-version:
    description: 'The named release of Open edX platform to deploy. Example: open-release/maple.3'
    required: true
    type: string
  aws-ecr-uri:
    description: ''
    required: true
    type: string
  aws-ses-iam-key:
    required: false
    default: SET-ME-PLEASE
  aws-ses-iam-secret:
    required: false
    default: SET-ME-PLEASE
  facebook-app-id:
    required: false
    default: SET-ME-PLEASE
  facebook-app-secret:
    required: false
    default: SET-ME-PLEASE
runs:
  using: "composite"
  steps:
    # get the Kubernetes kubeconfig for our cluster. This is a prerequisite to getting any other data about or contained within our cluster.
    # see: https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/
    #
    # summarizing: the kubeconfig (Kubernetes Configuration) is a text file that contains at a minimum
    # three values that are necessary in order to access the Kubernetes cluster using kubectl command line:
    #   - API server endpoint
    #   - EKS Cluster ARN
    #   - Certificate authority (ie the private ssh key)
    - name: Install and configure kubectl
      shell: bash
      run: |-
        sudo snap install kubectl --channel=1.23/stable --classic
        sudo snap install yq
        aws eks --region us-east-2 update-kubeconfig --name mrionline-global-live --alias eks-prod

    - name: Check environments versions
      shell: bash
      run: |-
        echo "kubectl version:"
        kubectl version --short
        echo
        echo "aws cli version:"
        aws --version

    # install the latest version of python3 which is a prerequisite for running Tutor
    - name: Setup Python
      shell: bash
      run: sudo apt install python3 python3-pip libyaml-dev

    # install Tutor which we'll use for configuring and deploying Open edX
    - name: Install Tutor
      shell: bash
      run: |-
        pip install --upgrade pyyaml
        echo "TUTOR_ROOT=$GITHUB_WORKSPACE/tutor" >> $GITHUB_ENV
        pip install tutor
        echo "TUTOR_VERSION=$(tutor --version | cut -f3 -d' ')" >> $GITHUB_ENV


    - name: Configure 3rd Party Authentication
      shell: bash
      run:  |-
        tutor config save --set OPENEDX_FACEBOOK_APP_ID="${{ inputs.facebook-app-id }}" \
                          --set OPENEDX_FACEBOOK_APP_SECRET="${{ inputs.facebook-app-secret }}"

    # retrieve the MySQL connection parameters that we created in Terraform
    # and then stored in Kubernetes secrets. These include:
    #   MYSQL_HOST: mysql.app.mrionline.com
    #   MYSQL_PORT: "3306"
    #   OPENEDX_MYSQL_USERNAME: openedx
    #   OPENEDX_MYSQL_PASSWORD: **************
    #   MYSQL_ROOT_USERNAME: root
    #   MYSQL_ROOT_PASSWORD: *************
    #
    # Also note that we are using jq to add a prefix of "TUTOR_" to each of the parameter names
    #
    # see: https://github.com/Medality-Health/openedx_devops/blob/main/terraform/modules/mysql/main.tf
    - name: fetch MySQL configuration from Kubernetes secrets
      shell: bash
      run: |-
        kubectl get secret mysql-root -n ${{ inputs.namespace }}  -o json | jq  '.data | map_values(@base64d)' | jq -r 'keys[] as $k | "TUTOR_\($k|ascii_upcase)=\(.[$k])"' >> $GITHUB_ENV

    #------------------------------------------------------------------------
    # II. Get all of our backend configuration data that was stored in
    #     Kubernetes secrets by various Terraform modules
    #------------------------------------------------------------------------
    - name: Configure Open edX version
      shell: bash
      run: |-
        echo "OPENEDX_COMMON_VERSION=${{ inputs.openedx-common-version }}" >> $GITHUB_ENV

    # retrieve the Open edX JWT token that we created with Terraform and
    # then stored in Kubernetes secrets
    # see: https://github.com/Medality-Health/openedx_devops/blob/main/terraform/modules/kubernetes_secrets/main.tf
    - name: Fetch JWT token
      shell: bash
      run: |-
        kubectl get secret jwt -n ${{ inputs.namespace }} -o json |  jq  '.data| map_values(@base64d)'  | jq -r 'keys[] as $k | "\(.[$k])"' > jwt_private_key

    - name: Generate JWT private key
      shell: bash
      run:  |-
        export TUTOR_JWT_RSA_PRIVATE_KEY=\'$(sed -E 's/$/\n/g' ./jwt_private_key)\'

    - name: Generate Tutor Config
      shell: bash
      run:  |-
        tutor config save
        cat $TUTOR_ROOT/config.yml


    # see: https://github.com/Medality-Health/openedx_devops/blob/main/terraform/modules/kubernetes_secrets/main.tf
    - name: fetch EDX Secret Key from Kubernetes secrets
      shell: bash
      run: |-
        kubectl get secret edx-secret-key -n ${{ inputs.namespace }}  -o json | jq  '.data | map_values(@base64d)' | jq -r 'keys[] as $k | "TUTOR_\($k|ascii_upcase)=\(.[$k])"' >> $GITHUB_ENV

    - name: Load environment specific settings (direct)
      shell: bash
      run: |-
        # Pin the instalation ID with the Kubernetes namespace. It needs to be unique and static per instalation.
        cat ci/tutor-deploy/environments/${{ inputs.environment-id }}/config.yml >> $GITHUB_ENV

    # note that values like $LMS_HOSTNAME come from this repo
    # in /ci/tutor-deploy/environments/prod/config.yml
    - name: Load additional environment specific settings  (computed)
      shell: bash
      run: |-
        # We don't want to run these services as we are using the Kubernetes ingress instead.
        echo "TUTOR_RUN_MYSQL=false" >> $GITHUB_ENV
        echo "TUTOR_ID=tutor-${{ inputs.namespace }}" >> $GITHUB_ENV
        echo "TUTOR_LMS_HOST=$LMS_HOSTNAME" >> $GITHUB_ENV
        echo "TUTOR_CMS_HOST=$CMS_HOSTNAME" >> $GITHUB_ENV
        echo "TUTOR_K8S_NAMESPACE=${{ inputs.namespace }}" >> $GITHUB_ENV
        echo "TUTOR_DOCKER_IMAGE_OPENEDX=${{ inputs.aws-ecr-uri }}" >> $GITHUB_ENV
        echo "TUTOR_RUN_CADDY=false" >> $GITHUB_ENV
        echo "TUTOR_RUN_NGINX=false" >> $GITHUB_ENV

    - name: Save tutor configuration data
      shell: bash
      run: |-
        tutor plugins disable all
        tutor config save
